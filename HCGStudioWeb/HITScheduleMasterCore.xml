<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HITScheduleMasterCore</name>
    </assembly>
    <members>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
        <member name="T:HCGStudio.HITScheduleMasterCore.Semester">
            <summary>
                课表中的学期
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.Semester.Spring">
            <summary>
            春季学期
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.Semester.Autumn">
            <summary>
            秋季学期
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.Semester.Summer">
            <summary>
            夏季学期
            </summary>
        </member>
        <member name="T:HCGStudio.HITScheduleMasterCore.Schedule">
            <summary>
                课表实例
            </summary>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.#ctor(System.Int32,HCGStudio.HITScheduleMasterCore.Semester)">
            <summary>
                指定年份和学期创建空的课表
            </summary>
            <param name="year">要创建课表的年份</param>
            <param name="semester">要创建课表的学期</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.#ctor">
            <summary>
                创建空的课表，请不要单独使用这个API，会导致年份与学期无法更改
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.Schedule.Item(System.Int32)">
            <summary>
                获取指定的课表条目
            </summary>
            <param name="index">课表条目的索引</param>
            <returns>实例中储存的课表条目实例</returns>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.Schedule.Entries">
            <summary>
                当前课表中所有的条目
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.Schedule.Count">
            <summary>
                当前课表中条目的数量
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.Schedule.Year">
            <summary>
                课表的年份
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.Schedule.SemesterStart">
            <summary>
                课表学期开始的时间
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.Schedule.Semester">
            <summary>
                课表的学期
            </summary>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.LoadFromStream(System.IO.Stream)">
            <summary>
                从已经打打开的流中读取并创建课表，将会在下个版本移除，请使用<see cref="M:HCGStudio.HITScheduleMasterCore.Schedule.LoadFromXlsStream(System.IO.Stream)"/>。
            </summary>
            
            <param name="inputStream">输入的流</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.LoadFromXlsStream(System.IO.Stream)">
            <summary>
                从已经打打开的XLS流中读取并创建课表
            </summary>
            <param name="inputStream">输入的流</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.LoadFromCsvStream(System.IO.Stream)">
            <summary>
                从已经打打开的CSV流中读取并创建课表
            </summary>
            <param name="inputStream">输入的流</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.AddScheduleEntry(HCGStudio.HITScheduleMasterCore.ScheduleEntry)">
            <summary>
                向课表中添加条目
            </summary>
            <param name="scheduleEntry">要添加的条目</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.RemoveAt(System.Int32)">
            <summary>
                移除指定的条目
            </summary>
            <param name="index">条目的索引</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.Schedule.GetCalendar">
            <summary>
                将当前课表实例转化为日历
            </summary>
            <returns>表示当前课表的日历实例</returns>
        </member>
        <member name="T:HCGStudio.HITScheduleMasterCore.CourseTime">
            <summary>
                课程的开始时间
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.CourseTime.Noon">
            <summary>
            中午课
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.CourseTime.C12">
            <summary>
            上午第一二节
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.CourseTime.C34">
            <summary>
            上午第三四节
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.CourseTime.C56">
            <summary>
            下午第五六节
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.CourseTime.C78">
            <summary>
            晚上第七八节
            </summary>
        </member>
        <member name="F:HCGStudio.HITScheduleMasterCore.CourseTime.C9A">
            <summary>
            晚上第九十节
            </summary>
        </member>
        <member name="T:HCGStudio.HITScheduleMasterCore.ScheduleEntry">
            <summary>
                课表条目
            </summary>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.ScheduleEntry.#ctor">
            <summary>
                创建一个空的课表条目实例
            </summary>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.ScheduleEntry.#ctor(System.DayOfWeek,HCGStudio.HITScheduleMasterCore.CourseTime,System.String,System.String,System.Boolean)">
            <summary>
                创造一个课表条目实例
            </summary>
            <param name="dayOfWeek">课程在一周中所在的日子</param>
            <param name="courseTime">课程开始的时间</param>
            <param name="courseName">课程的名称</param>
            <param name="scheduleExpression">课程的描述</param>
            <param name="isLongCourse">是否是长课</param>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.DayOfWeek">
            <summary>
                周几的数值记录
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.DayOfWeekName">
            <summary>
                周几
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.IsLongCourse">
            <summary>
                是否是三节课长度的课
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.CourseTime">
            <summary>
                课程时间
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.Teacher">
            <summary>
                授课教师
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.WeekExpression">
            <summary>
                课程详细描述
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.CourseName">
            <summary>
            课程名称
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.Location">
            <summary>
                上课的位置
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.MaxWeek">
            <summary>
                最大周数
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.Week">
            <summary>
                状压储存的周数。i位为1表示此周有课。
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.Length">
            <summary>
                课程的长度
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.StartTime">
            <summary>
                课程开始的时间距离0点的时长
            </summary>
        </member>
        <member name="P:HCGStudio.HITScheduleMasterCore.ScheduleEntry.CourseTimeName">
            <summary>
                时间段的汉字名称
            </summary>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.ScheduleEntry.ChangeWeek(System.String)">
            <summary>
                从周数的表达式中更改周数
            </summary>
            <param name="weekExpression">周数的表达式</param>
        </member>
        <member name="M:HCGStudio.HITScheduleMasterCore.ScheduleEntry.ParseWeek(System.String)">
            <summary>
                从周数的表达式中获取周数
            </summary>
            <param name="weekExpression">周数的表达式</param>
            <returns>周数</returns>
        </member>
    </members>
</doc>
